#include <stdio.h>
#include <string.h>

#define MAX 100

struct Student {
    char name[50];
    float marks;
};

// Bubble Sort
void bubbleSort(struct Student s[], int n) {
    struct Student temp;
    for (int i = 0; i < n-1; i++) {
        for (int j = 0; j < n-i-1; j++) {
            if (s[j].marks < s[j+1].marks) {
                temp = s[j];
                s[j] = s[j+1];
                s[j+1] = temp;
            }
        }
    }
}

// Quick Sort (descending)
int partition(struct Student s[], int low, int high) {
    float pivot = s[high].marks;
    int i = low - 1;
    struct Student temp;
    for (int j = low; j < high; j++) {
        if (s[j].marks >= pivot) {
            i++;
            temp = s[i];
            s[i] = s[j];
            s[j] = temp;
        }
    }
    temp = s[i+1];
    s[i+1] = s[high];
    s[high] = temp;
    return i + 1;
}

void quickSort(struct Student s[], int low, int high) {
    if (low < high) {
        int pi = partition(s, low, high);
        quickSort(s, low, pi - 1);
        quickSort(s, pi + 1, high);
    }
}

// Display topper(s)
void showToppers(struct Student s[], int n) {
    float top = s[0].marks;
    printf("Topper(s): ");
    for (int i = 0; i < n; i++) {
        if (s[i].marks == top)
            printf("%s ", s[i].name);
        else
            break;
    }
    printf("\n");
}

int main() {
    struct Student s[MAX];
    int n, choice;
    float total = 0;

    printf("Enter number of students: ");
    scanf("%d", &n);

    for (int i = 0; i < n; i++) {
        printf("Enter name of student %d: ", i+1);
        scanf(" %[^\n]", s[i].name); // accepts full name with spaces
        printf("Enter marks of %s: ", s[i].name);
        scanf("%f", &s[i].marks);
        total += s[i].marks;
    }

    printf("\nChoose sorting method:\n1. Bubble Sort\n2. Quick Sort\nEnter choice: ");
    scanf("%d", &choice);

    if (choice == 1)
        bubbleSort(s, n);
    else
        quickSort(s, 0, n - 1);

    printf("\nSorted List (Top to Bottom):\n");
    for (int i = 0; i < n; i++) {
        printf("%s: %.2f\n", s[i].name, s[i].marks);
    }

    printf("\nClass Average: %.2f\n", total / n);
    showToppers(s, n);

    return 0;
}